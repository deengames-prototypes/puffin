### YamlMime:ManagedReference
items:
- uid: Puffin.Core.Ecs.EntityExtensions
  commentId: T:Puffin.Core.Ecs.EntityExtensions
  id: EntityExtensions
  parent: Puffin.Core.Ecs
  children:
  - Puffin.Core.Ecs.EntityExtensions.Audio(Puffin.Core.Ecs.Entity,System.String)
  - Puffin.Core.Ecs.EntityExtensions.Collide(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Boolean)
  - Puffin.Core.Ecs.EntityExtensions.Colour(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32)
  - Puffin.Core.Ecs.EntityExtensions.FourWayMovement(Puffin.Core.Ecs.Entity,System.Int32)
  - Puffin.Core.Ecs.EntityExtensions.Keyboard(Puffin.Core.Ecs.Entity)
  - Puffin.Core.Ecs.EntityExtensions.Label(Puffin.Core.Ecs.Entity,System.String)
  - Puffin.Core.Ecs.EntityExtensions.Mouse(Puffin.Core.Ecs.Entity,System.Action,System.Int32,System.Int32)
  - Puffin.Core.Ecs.EntityExtensions.Move(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  - Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  - Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32)
  - Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32,System.Action{Puffin.Core.Ecs.Entity})
  - Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32,System.Action{Puffin.Core.Ecs.Entity},System.Action{Puffin.Core.Ecs.Entity})
  - Puffin.Core.Ecs.EntityExtensions.Sprite(Puffin.Core.Ecs.Entity,System.String)
  - Puffin.Core.Ecs.EntityExtensions.Spritesheet(Puffin.Core.Ecs.Entity,System.String,System.Int32,System.Int32)
  - Puffin.Core.Ecs.EntityExtensions.Velocity(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: EntityExtensions
  nameWithType: EntityExtensions
  fullName: Puffin.Core.Ecs.EntityExtensions
  type: Class
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: EntityExtensions
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 8
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nStatic extensions for Entity. You can chain them together, eg. Entity.Sprite(&quot;player.png&quot;).Move(200, 100);\n"
  example: []
  syntax:
    content: public static class EntityExtensions
    content.vb: Public Module EntityExtensions
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Puffin.Core.Ecs.EntityExtensions.Move(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Move(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  id: Move(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Move(Entity, Int32, Int32)
  nameWithType: EntityExtensions.Move(Entity, Int32, Int32)
  fullName: Puffin.Core.Ecs.EntityExtensions.Move(Puffin.Core.Ecs.Entity, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Move
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 13
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nImmediately moves an entity to the specified coordinates, ignoring velocity/overlap/collision/etc.\n"
  example: []
  syntax:
    content: public static Entity Move(this Entity entity, int x, int y)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Move(entity As Entity, x As Integer, y As Integer) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Move*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Sprite(Puffin.Core.Ecs.Entity,System.String)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Sprite(Puffin.Core.Ecs.Entity,System.String)
  id: Sprite(Puffin.Core.Ecs.Entity,System.String)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Sprite(Entity, String)
  nameWithType: EntityExtensions.Sprite(Entity, String)
  fullName: Puffin.Core.Ecs.EntityExtensions.Sprite(Puffin.Core.Ecs.Entity, System.String)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Sprite
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 23
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nAdds a sprite/image to an entity.\n"
  example: []
  syntax:
    content: public static Entity Sprite(this Entity entity, string imageFile)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: imageFile
      type: System.String
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sprite(entity As Entity, imageFile As String) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Sprite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Spritesheet(Puffin.Core.Ecs.Entity,System.String,System.Int32,System.Int32)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Spritesheet(Puffin.Core.Ecs.Entity,System.String,System.Int32,System.Int32)
  id: Spritesheet(Puffin.Core.Ecs.Entity,System.String,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Spritesheet(Entity, String, Int32, Int32)
  nameWithType: EntityExtensions.Spritesheet(Entity, String, Int32, Int32)
  fullName: Puffin.Core.Ecs.EntityExtensions.Spritesheet(Puffin.Core.Ecs.Entity, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Spritesheet
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 32
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nAdds a spritesheet/tilesheet to an entity.\n"
  example: []
  syntax:
    content: public static Entity Spritesheet(this Entity entity, string imageFile, int frameWidth, int frameHeight)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: imageFile
      type: System.String
    - id: frameWidth
      type: System.Int32
    - id: frameHeight
      type: System.Int32
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Spritesheet(entity As Entity, imageFile As String, frameWidth As Integer, frameHeight As Integer) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Spritesheet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Label(Puffin.Core.Ecs.Entity,System.String)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Label(Puffin.Core.Ecs.Entity,System.String)
  id: Label(Puffin.Core.Ecs.Entity,System.String)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Label(Entity, String)
  nameWithType: EntityExtensions.Label(Entity, String)
  fullName: Puffin.Core.Ecs.EntityExtensions.Label(Puffin.Core.Ecs.Entity, System.String)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Label
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 41
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nAdds a text display to an entity.\n"
  example: []
  syntax:
    content: public static Entity Label(this Entity entity, string text)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: text
      type: System.String
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Label(entity As Entity, text As String) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Label*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Mouse(Puffin.Core.Ecs.Entity,System.Action,System.Int32,System.Int32)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Mouse(Puffin.Core.Ecs.Entity,System.Action,System.Int32,System.Int32)
  id: Mouse(Puffin.Core.Ecs.Entity,System.Action,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Mouse(Entity, Action, Int32, Int32)
  nameWithType: EntityExtensions.Mouse(Entity, Action, Int32, Int32)
  fullName: Puffin.Core.Ecs.EntityExtensions.Mouse(Puffin.Core.Ecs.Entity, System.Action, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Mouse
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 51
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nAllows an entity to handle mouse events; the specified callback will be invoked on every click.\nThe width and height define the clickable area (relative to the origin of the entity).\n"
  example: []
  syntax:
    content: public static Entity Mouse(this Entity entity, Action onClick, int width, int height)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: onClick
      type: System.Action
    - id: width
      type: System.Int32
    - id: height
      type: System.Int32
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Mouse(entity As Entity, onClick As Action, width As Integer, height As Integer) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Mouse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Keyboard(Puffin.Core.Ecs.Entity)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Keyboard(Puffin.Core.Ecs.Entity)
  id: Keyboard(Puffin.Core.Ecs.Entity)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Keyboard(Entity)
  nameWithType: EntityExtensions.Keyboard(Entity)
  fullName: Puffin.Core.Ecs.EntityExtensions.Keyboard(Puffin.Core.Ecs.Entity)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Keyboard
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 60
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nExposes a method that allows an entity to check/respond to actions/keys.\n"
  example: []
  syntax:
    content: public static Entity Keyboard(this Entity entity)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Keyboard(entity As Entity) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Keyboard*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.FourWayMovement(Puffin.Core.Ecs.Entity,System.Int32)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.FourWayMovement(Puffin.Core.Ecs.Entity,System.Int32)
  id: FourWayMovement(Puffin.Core.Ecs.Entity,System.Int32)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: FourWayMovement(Entity, Int32)
  nameWithType: EntityExtensions.FourWayMovement(Entity, Int32)
  fullName: Puffin.Core.Ecs.EntityExtensions.FourWayMovement(Puffin.Core.Ecs.Entity, System.Int32)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: FourWayMovement
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 72
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nAdds a component which makes the entity move in four directions in response to the keyboard.\nBy default, this responds to the WASD and arrow keys; you can change these bindings\nby changing/adding more bindings in your PuffinGame instance.\nNote that setting this overrides an entity&apos;s velocity.\n"
  example: []
  syntax:
    content: public static Entity FourWayMovement(this Entity entity, int speed)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: speed
      type: System.Int32
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FourWayMovement(entity As Entity, speed As Integer) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.FourWayMovement*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  id: Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Overlap(Entity, Int32, Int32)
  nameWithType: EntityExtensions.Overlap(Entity, Int32, Int32)
  fullName: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Overlap
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 83
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nCreates an overlap component, which checks for overlap against other entities with overlap components.\n"
  example: []
  syntax:
    content: public static Entity Overlap(this Entity entity, int width, int height)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: width
      type: System.Int32
      description: The width of the overlap area.
    - id: height
      type: System.Int32
      description: The height of the overlap area.
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Overlap(entity As Entity, width As Integer, height As Integer) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Overlap*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32)
  id: Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Overlap(Entity, Int32, Int32, Int32, Int32)
  nameWithType: EntityExtensions.Overlap(Entity, Int32, Int32, Int32, Int32)
  fullName: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Overlap
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 96
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nCreates an overlap component, which checks for overlap against other entities with overlap components.\n"
  example: []
  syntax:
    content: public static Entity Overlap(this Entity entity, int width, int height, int offsetX, int offsetY)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: width
      type: System.Int32
      description: The width of the overlap area.
    - id: height
      type: System.Int32
      description: The height of the overlap area.
    - id: offsetX
      type: System.Int32
      description: The x-offset of the overlap area, relative to the origin of the entity.
    - id: offsetY
      type: System.Int32
      description: The y-offset of the overlap area, relative to the origin of the entity.
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Overlap(entity As Entity, width As Integer, height As Integer, offsetX As Integer, offsetY As Integer) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Overlap*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32,System.Action{Puffin.Core.Ecs.Entity})
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32,System.Action{Puffin.Core.Ecs.Entity})
  id: Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32,System.Action{Puffin.Core.Ecs.Entity})
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Overlap(Entity, Int32, Int32, Int32, Int32, Action<Entity>)
  nameWithType: EntityExtensions.Overlap(Entity, Int32, Int32, Int32, Int32, Action<Entity>)
  fullName: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity, System.Int32, System.Int32, System.Int32, System.Int32, System.Action<Puffin.Core.Ecs.Entity>)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Overlap
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 110
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nCreates an overlap component, which checks for overlap against other entities with overlap components.\n"
  example: []
  syntax:
    content: public static Entity Overlap(this Entity entity, int width, int height, int offsetX, int offsetY, Action<Entity> onStartOverlap)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: width
      type: System.Int32
      description: The width of the overlap area.
    - id: height
      type: System.Int32
      description: The height of the overlap area.
    - id: offsetX
      type: System.Int32
      description: The x-offset of the overlap area, relative to the origin of the entity.
    - id: offsetY
      type: System.Int32
      description: The y-offset of the overlap area, relative to the origin of the entity.
    - id: onStartOverlap
      type: System.Action{Puffin.Core.Ecs.Entity}
      description: The callback to invoke when an entity with an overlap component overlaps this one.
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Overlap(entity As Entity, width As Integer, height As Integer, offsetX As Integer, offsetY As Integer, onStartOverlap As Action(Of Entity)) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Overlap*
  nameWithType.vb: EntityExtensions.Overlap(Entity, Int32, Int32, Int32, Int32, Action(Of Entity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity, System.Int32, System.Int32, System.Int32, System.Int32, System.Action(Of Puffin.Core.Ecs.Entity))
  name.vb: Overlap(Entity, Int32, Int32, Int32, Int32, Action(Of Entity))
- uid: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32,System.Action{Puffin.Core.Ecs.Entity},System.Action{Puffin.Core.Ecs.Entity})
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32,System.Action{Puffin.Core.Ecs.Entity},System.Action{Puffin.Core.Ecs.Entity})
  id: Overlap(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32,System.Int32,System.Action{Puffin.Core.Ecs.Entity},System.Action{Puffin.Core.Ecs.Entity})
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Overlap(Entity, Int32, Int32, Int32, Int32, Action<Entity>, Action<Entity>)
  nameWithType: EntityExtensions.Overlap(Entity, Int32, Int32, Int32, Int32, Action<Entity>, Action<Entity>)
  fullName: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity, System.Int32, System.Int32, System.Int32, System.Int32, System.Action<Puffin.Core.Ecs.Entity>, System.Action<Puffin.Core.Ecs.Entity>)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Overlap
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 125
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nCreates an overlap component, which checks for overlap against other entities with overlap components.\n"
  example: []
  syntax:
    content: public static Entity Overlap(this Entity entity, int width, int height, int offsetX, int offsetY, Action<Entity> onStartOverlap, Action<Entity> onStopOverlap)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: width
      type: System.Int32
      description: The width of the overlap area.
    - id: height
      type: System.Int32
      description: The height of the overlap area.
    - id: offsetX
      type: System.Int32
      description: The x-offset of the overlap area, relative to the origin of the entity.
    - id: offsetY
      type: System.Int32
      description: The y-offset of the overlap area, relative to the origin of the entity.
    - id: onStartOverlap
      type: System.Action{Puffin.Core.Ecs.Entity}
      description: The callback to invoke when an entity with an overlap component overlaps this one.
    - id: onStopOverlap
      type: System.Action{Puffin.Core.Ecs.Entity}
      description: The callback to invoke when an entity with an overlap component stops overlapping this one.
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Overlap(entity As Entity, width As Integer, height As Integer, offsetX As Integer, offsetY As Integer, onStartOverlap As Action(Of Entity), onStopOverlap As Action(Of Entity)) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Overlap*
  nameWithType.vb: EntityExtensions.Overlap(Entity, Int32, Int32, Int32, Int32, Action(Of Entity), Action(Of Entity))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Puffin.Core.Ecs.EntityExtensions.Overlap(Puffin.Core.Ecs.Entity, System.Int32, System.Int32, System.Int32, System.Int32, System.Action(Of Puffin.Core.Ecs.Entity), System.Action(Of Puffin.Core.Ecs.Entity))
  name.vb: Overlap(Entity, Int32, Int32, Int32, Int32, Action(Of Entity), Action(Of Entity))
- uid: Puffin.Core.Ecs.EntityExtensions.Audio(Puffin.Core.Ecs.Entity,System.String)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Audio(Puffin.Core.Ecs.Entity,System.String)
  id: Audio(Puffin.Core.Ecs.Entity,System.String)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Audio(Entity, String)
  nameWithType: EntityExtensions.Audio(Entity, String)
  fullName: Puffin.Core.Ecs.EntityExtensions.Audio(Puffin.Core.Ecs.Entity, System.String)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Audio
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 135
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nAllows an entity to play an audio file (short or long), optionally at a modified pitch.\nYou should be able to play WAV files and OGG files.\n"
  example: []
  syntax:
    content: public static Entity Audio(this Entity entity, string audioFileName)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: audioFileName
      type: System.String
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Audio(entity As Entity, audioFileName As String) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Audio*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Colour(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Colour(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32)
  id: Colour(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Colour(Entity, Int32, Int32, Int32)
  nameWithType: EntityExtensions.Colour(Entity, Int32, Int32, Int32)
  fullName: Puffin.Core.Ecs.EntityExtensions.Colour(Puffin.Core.Ecs.Entity, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Colour
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 145
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nAdds a coloured rectangle to an entity.\n"
  example: []
  syntax:
    content: public static Entity Colour(this Entity entity, int rgb, int width, int height)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: rgb
      type: System.Int32
      description: The rectangle&apos;s colour, in the format 0xRRGGBB with hex values for each pair.
    - id: width
      type: System.Int32
    - id: height
      type: System.Int32
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Colour(entity As Entity, rgb As Integer, width As Integer, height As Integer) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Colour*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Collide(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Boolean)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Collide(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Boolean)
  id: Collide(Puffin.Core.Ecs.Entity,System.Int32,System.Int32,System.Boolean)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Collide(Entity, Int32, Int32, Boolean)
  nameWithType: EntityExtensions.Collide(Entity, Int32, Int32, Boolean)
  fullName: Puffin.Core.Ecs.EntityExtensions.Collide(Puffin.Core.Ecs.Entity, System.Int32, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Collide
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 158
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nCauses an entity to collide with other collidable entities and solid tiles.\n"
  example: []
  syntax:
    content: public static Entity Collide(this Entity entity, int width, int height, bool slideOnCollide = false)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: width
      type: System.Int32
      description: The width of the collidable area, in pixels
    - id: height
      type: System.Int32
      description: The height of the collidable area, in pixels
    - id: slideOnCollide
      type: System.Boolean
      description: >-
        If true, when colliding, slide in the direction of the non-colliding

        axis instead of abruptly stopping.
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Collide(entity As Entity, width As Integer, height As Integer, slideOnCollide As Boolean = False) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Collide*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Puffin.Core.Ecs.EntityExtensions.Velocity(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  commentId: M:Puffin.Core.Ecs.EntityExtensions.Velocity(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  id: Velocity(Puffin.Core.Ecs.Entity,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Puffin.Core.Ecs.EntityExtensions
  langs:
  - csharp
  - vb
  name: Velocity(Entity, Int32, Int32)
  nameWithType: EntityExtensions.Velocity(Entity, Int32, Int32)
  fullName: Puffin.Core.Ecs.EntityExtensions.Velocity(Puffin.Core.Ecs.Entity, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Puffin.Core/Ecs/EntityExtensions.cs
      branch: documentation
      repo: git@github.com:nightblade9/puffin
    id: Velocity
    path: ../Puffin.Core/Ecs/EntityExtensions.cs
    startLine: 167
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core.Ecs
  summary: "\nSets an entity&apos;s velocity, causing it to move constantly in that direction.\n"
  example: []
  syntax:
    content: public static Entity Velocity(this Entity entity, int velocityX, int velocityY)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    - id: velocityX
      type: System.Int32
    - id: velocityY
      type: System.Int32
    return:
      type: Puffin.Core.Ecs.Entity
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Velocity(entity As Entity, velocityX As Integer, velocityY As Integer) As Entity
  overload: Puffin.Core.Ecs.EntityExtensions.Velocity*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Puffin.Core.Ecs
  commentId: N:Puffin.Core.Ecs
  name: Puffin.Core.Ecs
  nameWithType: Puffin.Core.Ecs
  fullName: Puffin.Core.Ecs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Puffin.Core.Ecs.EntityExtensions.Move*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Move
  name: Move
  nameWithType: EntityExtensions.Move
  fullName: Puffin.Core.Ecs.EntityExtensions.Move
- uid: Puffin.Core.Ecs.Entity
  commentId: T:Puffin.Core.Ecs.Entity
  parent: Puffin.Core.Ecs
  name: Entity
  nameWithType: Entity
  fullName: Puffin.Core.Ecs.Entity
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Puffin.Core.Ecs.EntityExtensions.Sprite*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Sprite
  name: Sprite
  nameWithType: EntityExtensions.Sprite
  fullName: Puffin.Core.Ecs.EntityExtensions.Sprite
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Puffin.Core.Ecs.EntityExtensions.Spritesheet*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Spritesheet
  name: Spritesheet
  nameWithType: EntityExtensions.Spritesheet
  fullName: Puffin.Core.Ecs.EntityExtensions.Spritesheet
- uid: Puffin.Core.Ecs.EntityExtensions.Label*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Label
  name: Label
  nameWithType: EntityExtensions.Label
  fullName: Puffin.Core.Ecs.EntityExtensions.Label
- uid: Puffin.Core.Ecs.EntityExtensions.Mouse*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Mouse
  name: Mouse
  nameWithType: EntityExtensions.Mouse
  fullName: Puffin.Core.Ecs.EntityExtensions.Mouse
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: Puffin.Core.Ecs.EntityExtensions.Keyboard*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Keyboard
  name: Keyboard
  nameWithType: EntityExtensions.Keyboard
  fullName: Puffin.Core.Ecs.EntityExtensions.Keyboard
- uid: Puffin.Core.Ecs.EntityExtensions.FourWayMovement*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.FourWayMovement
  name: FourWayMovement
  nameWithType: EntityExtensions.FourWayMovement
  fullName: Puffin.Core.Ecs.EntityExtensions.FourWayMovement
- uid: Puffin.Core.Ecs.EntityExtensions.Overlap*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Overlap
  name: Overlap
  nameWithType: EntityExtensions.Overlap
  fullName: Puffin.Core.Ecs.EntityExtensions.Overlap
- uid: System.Action{Puffin.Core.Ecs.Entity}
  commentId: T:System.Action{Puffin.Core.Ecs.Entity}
  parent: System
  definition: System.Action`1
  name: Action<Entity>
  nameWithType: Action<Entity>
  fullName: System.Action<Puffin.Core.Ecs.Entity>
  nameWithType.vb: Action(Of Entity)
  fullName.vb: System.Action(Of Puffin.Core.Ecs.Entity)
  name.vb: Action(Of Entity)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Puffin.Core.Ecs.Entity
    name: Entity
    nameWithType: Entity
    fullName: Puffin.Core.Ecs.Entity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Puffin.Core.Ecs.Entity
    name: Entity
    nameWithType: Entity
    fullName: Puffin.Core.Ecs.Entity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Puffin.Core.Ecs.EntityExtensions.Audio*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Audio
  name: Audio
  nameWithType: EntityExtensions.Audio
  fullName: Puffin.Core.Ecs.EntityExtensions.Audio
- uid: Puffin.Core.Ecs.EntityExtensions.Colour*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Colour
  name: Colour
  nameWithType: EntityExtensions.Colour
  fullName: Puffin.Core.Ecs.EntityExtensions.Colour
- uid: Puffin.Core.Ecs.EntityExtensions.Collide*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Collide
  name: Collide
  nameWithType: EntityExtensions.Collide
  fullName: Puffin.Core.Ecs.EntityExtensions.Collide
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Puffin.Core.Ecs.EntityExtensions.Velocity*
  commentId: Overload:Puffin.Core.Ecs.EntityExtensions.Velocity
  name: Velocity
  nameWithType: EntityExtensions.Velocity
  fullName: Puffin.Core.Ecs.EntityExtensions.Velocity
