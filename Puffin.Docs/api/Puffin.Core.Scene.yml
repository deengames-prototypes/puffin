### YamlMime:ManagedReference
items:
- uid: Puffin.Core.Scene
  commentId: T:Puffin.Core.Scene
  id: Scene
  parent: Puffin.Core
  children:
  - Puffin.Core.Scene.#ctor
  - Puffin.Core.Scene.Add(Puffin.Core.Ecs.Entity)
  - Puffin.Core.Scene.Add(Puffin.Core.Tiles.TileMap)
  - Puffin.Core.Scene.BackgroundColour
  - Puffin.Core.Scene.Dispose
  - Puffin.Core.Scene.Fps
  - Puffin.Core.Scene.IsActionDown(System.Enum)
  - Puffin.Core.Scene.MouseCoordinates
  - Puffin.Core.Scene.Remove(Puffin.Core.Ecs.Entity)
  - Puffin.Core.Scene.Remove(Puffin.Core.Tiles.TileMap)
  - Puffin.Core.Scene.Update(System.Int32)
  langs:
  - csharp
  - vb
  name: Scene
  nameWithType: Scene
  fullName: Puffin.Core.Scene
  type: Class
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: Scene
    path: ../Puffin.Core/Scene.cs
    startLine: 14
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nA scene or screen in your game. This is where you add entities with functionality\nto implement your game&apos;s logic.\n"
  example: []
  syntax:
    content: 'public class Scene : IDisposable'
    content.vb: >-
      Public Class Scene
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Puffin.Core.Scene.Fps
  commentId: P:Puffin.Core.Scene.Fps
  id: Fps
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: Fps
  nameWithType: Scene.Fps
  fullName: Puffin.Core.Scene.Fps
  type: Property
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: Fps
    path: ../Puffin.Core/Scene.cs
    startLine: 22
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nThe last recorded FPS (frames per second). This is the number of draw calls per second.\nThis value updates approximately every second.\n"
  example: []
  syntax:
    content: public float Fps { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Fps As Single
  overload: Puffin.Core.Scene.Fps*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Puffin.Core.Scene.BackgroundColour
  commentId: F:Puffin.Core.Scene.BackgroundColour
  id: BackgroundColour
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: BackgroundColour
  nameWithType: Scene.BackgroundColour
  fullName: Puffin.Core.Scene.BackgroundColour
  type: Field
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: BackgroundColour
    path: ../Puffin.Core/Scene.cs
    startLine: 27
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nThe background colour of this scene in the format 0xRRGGBB; it is drawn before all other entities.\n"
  example: []
  syntax:
    content: public int BackgroundColour
    return:
      type: System.Int32
    content.vb: Public BackgroundColour As Integer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Puffin.Core.Scene.MouseCoordinates
  commentId: P:Puffin.Core.Scene.MouseCoordinates
  id: MouseCoordinates
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: MouseCoordinates
  nameWithType: Scene.MouseCoordinates
  fullName: Puffin.Core.Scene.MouseCoordinates
  type: Property
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: MouseCoordinates
    path: ../Puffin.Core/Scene.cs
    startLine: 51
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nThe current mouse coordinates.\n"
  example: []
  syntax:
    content: public Tuple<int, int> MouseCoordinates { get; }
    parameters: []
    return:
      type: System.Tuple{System.Int32,System.Int32}
    content.vb: Public ReadOnly Property MouseCoordinates As Tuple(Of Integer, Integer)
  overload: Puffin.Core.Scene.MouseCoordinates*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Puffin.Core.Scene.#ctor
  commentId: M:Puffin.Core.Scene.#ctor
  id: '#ctor'
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: Scene()
  nameWithType: Scene.Scene()
  fullName: Puffin.Core.Scene.Scene()
  type: Constructor
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: .ctor
    path: ../Puffin.Core/Scene.cs
    startLine: 56
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nCreates a new, empty Scene instance.\n"
  example: []
  syntax:
    content: public Scene()
    content.vb: Public Sub New
  overload: Puffin.Core.Scene.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Puffin.Core.Scene.Add(Puffin.Core.Ecs.Entity)
  commentId: M:Puffin.Core.Scene.Add(Puffin.Core.Ecs.Entity)
  id: Add(Puffin.Core.Ecs.Entity)
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: Add(Entity)
  nameWithType: Scene.Add(Entity)
  fullName: Puffin.Core.Scene.Add(Puffin.Core.Ecs.Entity)
  type: Method
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: Add
    path: ../Puffin.Core/Scene.cs
    startLine: 65
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nAdds an entity to the current scene so that it starts functioning (based on its components).\n"
  example: []
  syntax:
    content: public void Add(Entity entity)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    content.vb: Public Sub Add(entity As Entity)
  overload: Puffin.Core.Scene.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Puffin.Core.Scene.Remove(Puffin.Core.Ecs.Entity)
  commentId: M:Puffin.Core.Scene.Remove(Puffin.Core.Ecs.Entity)
  id: Remove(Puffin.Core.Ecs.Entity)
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: Remove(Entity)
  nameWithType: Scene.Remove(Entity)
  fullName: Puffin.Core.Scene.Remove(Puffin.Core.Ecs.Entity)
  type: Method
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: Remove
    path: ../Puffin.Core/Scene.cs
    startLine: 82
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nRemove an entity from the scene; it will no longer be rendered, updated, etc.\n"
  example: []
  syntax:
    content: public void Remove(Entity entity)
    parameters:
    - id: entity
      type: Puffin.Core.Ecs.Entity
    content.vb: Public Sub Remove(entity As Entity)
  overload: Puffin.Core.Scene.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Puffin.Core.Scene.Add(Puffin.Core.Tiles.TileMap)
  commentId: M:Puffin.Core.Scene.Add(Puffin.Core.Tiles.TileMap)
  id: Add(Puffin.Core.Tiles.TileMap)
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: Add(TileMap)
  nameWithType: Scene.Add(TileMap)
  fullName: Puffin.Core.Scene.Add(Puffin.Core.Tiles.TileMap)
  type: Method
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: Add
    path: ../Puffin.Core/Scene.cs
    startLine: 95
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nAdds a tilemap to the scene; it will be drawn. Any tiles with no value set, won&apos;t be drawn.\nNote that tilemaps are drawn in the order added.\n"
  example: []
  syntax:
    content: public void Add(TileMap tileMap)
    parameters:
    - id: tileMap
      type: Puffin.Core.Tiles.TileMap
    content.vb: Public Sub Add(tileMap As TileMap)
  overload: Puffin.Core.Scene.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Puffin.Core.Scene.Remove(Puffin.Core.Tiles.TileMap)
  commentId: M:Puffin.Core.Scene.Remove(Puffin.Core.Tiles.TileMap)
  id: Remove(Puffin.Core.Tiles.TileMap)
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: Remove(TileMap)
  nameWithType: Scene.Remove(TileMap)
  fullName: Puffin.Core.Scene.Remove(Puffin.Core.Tiles.TileMap)
  type: Method
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: Remove
    path: ../Puffin.Core/Scene.cs
    startLine: 107
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nRemoves a tilemap from the scene; it will no longer be drawn.\n"
  example: []
  syntax:
    content: public void Remove(TileMap tileMap)
    parameters:
    - id: tileMap
      type: Puffin.Core.Tiles.TileMap
    content.vb: Public Sub Remove(tileMap As TileMap)
  overload: Puffin.Core.Scene.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Puffin.Core.Scene.IsActionDown(System.Enum)
  commentId: M:Puffin.Core.Scene.IsActionDown(System.Enum)
  id: IsActionDown(System.Enum)
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: IsActionDown(Enum)
  nameWithType: Scene.IsActionDown(Enum)
  fullName: Puffin.Core.Scene.IsActionDown(System.Enum)
  type: Method
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: IsActionDown
    path: ../Puffin.Core/Scene.cs
    startLine: 115
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nReturn true if any of a specific action&apos;s keys are pressed.\n"
  example: []
  syntax:
    content: public bool IsActionDown(Enum action)
    parameters:
    - id: action
      type: System.Enum
    return:
      type: System.Boolean
    content.vb: Public Function IsActionDown(action As  Enum) As Boolean
  overload: Puffin.Core.Scene.IsActionDown*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Puffin.Core.Scene.Update(System.Int32)
  commentId: M:Puffin.Core.Scene.Update(System.Int32)
  id: Update(System.Int32)
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: Update(Int32)
  nameWithType: Scene.Update(Int32)
  fullName: Puffin.Core.Scene.Update(System.Int32)
  type: Method
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: Update
    path: ../Puffin.Core/Scene.cs
    startLine: 124
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nA method that&apos;s called every time Update is called by the game engine.\nOverride it to do things &quot;every frame.&quot;\n"
  example: []
  syntax:
    content: public virtual void Update(int elapsedMilliseconds)
    parameters:
    - id: elapsedMilliseconds
      type: System.Int32
    content.vb: Public Overridable Sub Update(elapsedMilliseconds As Integer)
  overload: Puffin.Core.Scene.Update*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Puffin.Core.Scene.Dispose
  commentId: M:Puffin.Core.Scene.Dispose
  id: Dispose
  parent: Puffin.Core.Scene
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Scene.Dispose()
  fullName: Puffin.Core.Scene.Dispose()
  type: Method
  source:
    remote:
      path: Puffin.Core/Scene.cs
      branch: documentation
      repo: https://github.com/nightblade9/puffin-engine.git
    id: Dispose
    path: ../Puffin.Core/Scene.cs
    startLine: 132
  assemblies:
  - Puffin.Core
  namespace: Puffin.Core
  summary: "\nDisposes the scene and the event bus (so entities can be garbage-collected).\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Puffin.Core.Scene.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Puffin.Core
  commentId: N:Puffin.Core
  name: Puffin.Core
  nameWithType: Puffin.Core
  fullName: Puffin.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Puffin.Core.Scene.Fps*
  commentId: Overload:Puffin.Core.Scene.Fps
  name: Fps
  nameWithType: Scene.Fps
  fullName: Puffin.Core.Scene.Fps
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Puffin.Core.Scene.MouseCoordinates*
  commentId: Overload:Puffin.Core.Scene.MouseCoordinates
  name: MouseCoordinates
  nameWithType: Scene.MouseCoordinates
  fullName: Puffin.Core.Scene.MouseCoordinates
- uid: System.Tuple{System.Int32,System.Int32}
  commentId: T:System.Tuple{System.Int32,System.Int32}
  parent: System
  definition: System.Tuple`2
  name: Tuple<Int32, Int32>
  nameWithType: Tuple<Int32, Int32>
  fullName: System.Tuple<System.Int32, System.Int32>
  nameWithType.vb: Tuple(Of Int32, Int32)
  fullName.vb: System.Tuple(Of System.Int32, System.Int32)
  name.vb: Tuple(Of Int32, Int32)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`2
  commentId: T:System.Tuple`2
  isExternal: true
  name: Tuple<T1, T2>
  nameWithType: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  nameWithType.vb: Tuple(Of T1, T2)
  fullName.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Puffin.Core.Scene.#ctor*
  commentId: Overload:Puffin.Core.Scene.#ctor
  name: Scene
  nameWithType: Scene.Scene
  fullName: Puffin.Core.Scene.Scene
- uid: Puffin.Core.Scene.Add*
  commentId: Overload:Puffin.Core.Scene.Add
  name: Add
  nameWithType: Scene.Add
  fullName: Puffin.Core.Scene.Add
- uid: Puffin.Core.Ecs.Entity
  commentId: T:Puffin.Core.Ecs.Entity
  parent: Puffin.Core.Ecs
  name: Entity
  nameWithType: Entity
  fullName: Puffin.Core.Ecs.Entity
- uid: Puffin.Core.Ecs
  commentId: N:Puffin.Core.Ecs
  name: Puffin.Core.Ecs
  nameWithType: Puffin.Core.Ecs
  fullName: Puffin.Core.Ecs
- uid: Puffin.Core.Scene.Remove*
  commentId: Overload:Puffin.Core.Scene.Remove
  name: Remove
  nameWithType: Scene.Remove
  fullName: Puffin.Core.Scene.Remove
- uid: Puffin.Core.Tiles.TileMap
  commentId: T:Puffin.Core.Tiles.TileMap
  parent: Puffin.Core.Tiles
  name: TileMap
  nameWithType: TileMap
  fullName: Puffin.Core.Tiles.TileMap
- uid: Puffin.Core.Tiles
  commentId: N:Puffin.Core.Tiles
  name: Puffin.Core.Tiles
  nameWithType: Puffin.Core.Tiles
  fullName: Puffin.Core.Tiles
- uid: Puffin.Core.Scene.IsActionDown*
  commentId: Overload:Puffin.Core.Scene.IsActionDown
  name: IsActionDown
  nameWithType: Scene.IsActionDown
  fullName: Puffin.Core.Scene.IsActionDown
- uid: System.Enum
  commentId: T:System.Enum
  parent: System
  isExternal: true
  name: Enum
  nameWithType: Enum
  fullName: System.Enum
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Puffin.Core.Scene.Update*
  commentId: Overload:Puffin.Core.Scene.Update
  name: Update
  nameWithType: Scene.Update
  fullName: Puffin.Core.Scene.Update
- uid: Puffin.Core.Scene.Dispose*
  commentId: Overload:Puffin.Core.Scene.Dispose
  name: Dispose
  nameWithType: Scene.Dispose
  fullName: Puffin.Core.Scene.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
